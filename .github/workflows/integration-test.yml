name: Integration tests

on:
  push:
    branches:
      - master
      - prod
      - release/*
  pull_request:
    branches:
      - master
      - prod
      - release/*

env:
  SCCACHE_REGION: ap-northeast-1
  SCCACHE_BUCKET: ff-building
  SCCACHE_S3_USE_SSL: true
  SCCACHE_S3_KEY_PREFIX: sccache-gh-action
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CARGO_INCREMENTAL: false

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        rust:
          - 1.56.0

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install libpq
        run: sudo apt-get install libpq-dev

      - name: Install rust 1.56.0 toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.56.0
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup sccache
        run: |
          cd $RUNNER_TEMP
          export NAME="sccache-v0.2.15-x86_64-unknown-linux-musl"
          curl -fsSOL https://github.com/mozilla/sccache/releases/download/v0.2.15/$NAME.tar.gz
          tar xzf $NAME.tar.gz
          mkdir -p ~/.cargo/bin
          mv ./$NAME/sccache ~/.cargo/bin
          chmod +x ~/.cargo/bin/sccache
          printf "[build]\nrustc-wrapper = \"/home/runner/.cargo/bin/sccache\"" >> ~/.cargo/config
          ~/.cargo/bin/sccache -s

      - name: Install Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          # cache: 'npm'
          # cache-dependency-path: examples/js/package-lock.json

      - name: Cache node_modules
        id: npm_cache
        uses: actions/cache@v2
        with:
          path: ./examples/js/node_modules
          key: node_modules-${{ hashFiles('examples/js/package-lock.json') }}

      - name: npm ci
        if: steps.npm_cache.outputs.cache-hit != 'true'
        run: |
          cd ./examples/js/
          npm ci

      - name: Pull git submodule
        run: git submodule update --init --recursive

      - name: Up docker-compose
        run: docker-compose --file "./orchestra/docker/docker-compose.yaml" up --detach

      # 1. we build the binary after starting docker-compose, to ensure time for running services in docker-compose
      # 2. we avoid nohup cargo run directly, to make sure server is running before starting trading tests
      - name: Start exchange server daemon
        run: make startall

      - name: show sccache stats
        run: ~/.cargo/bin/sccache -s

      - name: Check services status
        run: |
          sleep 5
          make taillogs
          docker-compose --file "./orchestra/docker/docker-compose.yaml" logs --tail=20

      - name: Setup environment variables
        run: |
          touch ./examples/js/.env
          echo KC_URL=${{ secrets.KC_URL }} >> ./examples/js/.env
          echo KC_REALM=${{ secrets.KC_REALM }} >> ./examples/js/.env
          echo KC_CLIENT_ID=${{ secrets.KC_CLIENT_ID }} >> ./examples/js/.env
          echo KC_CLIENT_SECRET=${{ secrets.KC_CLIENT_SECRET }} >> ./examples/js/.env
          echo KC_ADMIN_NAME=${{ secrets.KC_ADMIN_NAME }} >> ./examples/js/.env
          echo KC_ADMIN_PASSWORD=${{ secrets.KC_ADMIN_PASSWORD }} >> ./examples/js/.env
          echo KC_DEPOSIT_ADMIN_NAME=${{ secrets.KC_DEPOSIT_ADMIN_NAME }} >> ./examples/js/.env
          echo KC_DEPOSIT_ADMIN_PASSWORD=${{ secrets.KC_DEPOSIT_ADMIN_PASSWORD }} >> ./examples/js/.env
          echo KC_WITHDRAWAl_ADMIN_NAME=${{ secrets.KC_WITHDRAWAl_ADMIN_NAME }} >> ./examples/js/.env
          echo KC_WITHDRAWAl_ADMIN_PASSWORD=${{ secrets.KC_WITHDRAWAl_ADMIN_PASSWORD }} >> ./examples/js/.env
          echo KC_USER1_ID=${{ secrets.KC_USER1_ID }} >> ./examples/js/.env
          echo KC_USER1_NAME=${{ secrets.KC_USER1_NAME }} >> ./examples/js/.env
          echo KC_USER1_PASSWORD=${{ secrets.KC_USER1_PASSWORD }} >> ./examples/js/.env
          echo KC_USER2_ID=${{ secrets.KC_USER2_ID }} >> ./examples/js/.env
          echo KC_USER2_NAME=${{ secrets.KC_USER2_NAME }} >> ./examples/js/.env
          echo KC_USER2_PASSWORD=${{ secrets.KC_USER2_PASSWORD }} >> ./examples/js/.env
          echo JWT_INVALID_SIGNATURE=${{ secrets.JWT_INVALID_SIGNATURE }} >> ./examples/js/.env
          echo JWT_EXPIRED=${{ secrets.JWT_EXPIRED }} >> ./examples/js/.env
          cat ./examples/js/.env
      - name: Run trading tests
        run: |
          cd ./examples/js/
          npx ts-node tests/trade.ts
          sleep 5
          npx ts-node tests/print_orders.ts
          npx ts-node tests/put_batch_orders.ts
          npx ts-node tests/unfavorable_prices.ts
      - name: Run authorization tests
        run: |
          cd ./examples/js/
          npx ts-node tests/authorization.ts
